/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input ProductSearchResult : dw.catalog.ProductSearchModel
*   @input CurrentHttpParameter : dw.web.HttpParameterMap
*   @output CustomSearchHits : dw.util.ArrayList
*
*/
importPackage( dw.system );
importPackage( dw.catalog );
importPackage( dw.util );
importScript("util/ViewHelpers.ds" );

function execute( args : PipelineDictionary ) : Number
{

    try {
    	
    	if (!empty(args.ProductSearchResult)) {
    		//Check if customer if autheticated.
	    	if(!empty(customer) && customer.authenticated) {
	    		var customerConsolidation = customer.profile.custom.consolidationCode;
	    		var catName = "";
	    		var excludedCat;
		    	if (!empty(customerConsolidation)) {
		    		var portals = Site.getCurrent().preferences.custom.portalToSortPLPBasedOnCustomer;
		    		for each(var p in portals) {
		    			//Check if Current Poratl support this Sorting
		    			if (p == customer.profile.custom.chainCode) {
		    				var sortCategoryBasedOnConsolidation = 'sortCategoryBasedOnConsolidation' in dw.system.Site.current.preferences.custom ? dw.system.Site.current.preferences.custom.sortCategoryBasedOnConsolidation : "" ;
		    				var parseCosnsolidation = JSON.parse(sortCategoryBasedOnConsolidation);
		    				catName = parseCosnsolidation[customerConsolidation];
		    				excludedCat = CatalogMgr.getCategory(catName);
		    			}
		    		}
		    		
		    		if(!empty(catName)) {
		    			var productArray : ArrayList = new ArrayList();
		    			var includedCatProd : ArrayList = new ArrayList();
		    			var excludedCatProd : ArrayList = new ArrayList();
		    			var productHits : Iterator = args.ProductSearchResult.productSearchHits;
		    			
		    			//@FIXME with better approach
		    			//Loop through each productHits and put then at the last.
		    			while(productHits.hasNext()) {
		    				var ele = productHits.next();
		    				var currentProduct :Product = ele.product;
		    				var isexcludedProduct  = currentProduct.categories.contains(excludedCat) ? true : false;
		    				
		    				if(isexcludedProduct) {
		    					excludedCatProd.add(ele);
		    				} else {
		    					productArray.add(ele);
		    				}
		    			}
		    			
		    			//Add excluded Product in Prod Array
		    			if(excludedCatProd.length > 0) {
		    				for each(var prod in excludedCatProd ) {
		    					productArray.add(prod);
		    				}
		    			}
		    			args.CustomSearchHits = productArray;
		    		}
		    	} // Cutsomer have consolidation code.
	    	} else {
	    		var productHits : Iterator = args.ProductSearchResult.productSearchHits;
	    		var productArray : ArrayList = new ArrayList();
	    		while(productHits.hasNext()) {
    				var ele = productHits.next();
    				productArray.add(ele);
    			}
    			args.CustomSearchHits = productArray;
	    	}
    	}// Product Search Result empty.
    	
    	// Add Banner Slot Object
    	// Exclude Portal as well
    	var refi = args.ProductSearchResult;
    	if(!empty(args.ProductSearchResult.category) && ViewHelpers.checkIfEligibleForPLPBanner(args.ProductSearchResult, args.ProductSearchResult.category)) {
			// get the slot Position
			var position = 'bannerTilePosition' in args.ProductSearchResult.category.custom ? args.ProductSearchResult.category.custom.bannerTilePosition : '';
			if (!empty(position)) {
				//Get the Tile Position
				var tilePos : Array = position.split('|');
				for (let i=0; i<tilePos.length; i++) {
					let index = tilePos[i];
					//type OBJECT is intentionally, for future use
					if(index - 1 >= args.CustomSearchHits.length) {
						args.CustomSearchHits.addAt(args.CustomSearchHits.length, {type: "SLOT", index: args.CustomSearchHits.length});
					} else {
						args.CustomSearchHits.addAt(index - 1, {type: "SLOT", index:index - 1});
					}
					
				}
			}
    	} else if(!args.ProductSearchResult.categorySearch && args.CurrentHttpParameter.q.submitted && !empty(args.CurrentHttpParameter.q.value) && ViewHelpers.checkIfEligibleForSearchPLPBanner(args.ProductSearchResult, args.CurrentHttpParameter.q.value)) {
    		//If we have search any keyword which is there in the defined assets, get it and display it on the PLP.
    		var q = args.CurrentHttpParameter.q.value;
    		if(q.indexOf('-') > -1) {
    			q = q.substring(0, (q.indexOf('-'))-1);
    		}
    		//Get the assets
    		var assetContent  = dw.content.ContentMgr.getContent("searchPagePLPBannerConfigAssets");
			
			var assetConfig = assetContent.custom.plpBannerContentConfig;
			var config = !empty(assetConfig) ? JSON.parse(assetConfig) : '';
			
			// Get config for current query
			var position = !empty(config) && !empty(config[q]) && !empty(config[q].position) ? config[q].position : [];
			
			if (!empty(position)) {
				//Get the Tile Position
				var tilePos : Array = position.split('|');
				for (let i=0; i<tilePos.length; i++) {
					let index = tilePos[i];
					//type OBJECT is intentionally, for future use
					//IF Object available on index -1 then only add else add at the last position
					if(index - 1 >= args.CustomSearchHits.length) {
						args.CustomSearchHits.addAt(args.CustomSearchHits.length , {type: "ASSETS", index:args.CustomSearchHits.length});
					} else {
						args.CustomSearchHits.addAt(index - 1, {type: "ASSETS", index:index - 1});
					}
					
				}
			}
    	}
    } catch(e) {
    	var error = e;
    	return PIPELET_NEXT;
    }

    return PIPELET_NEXT;
}
