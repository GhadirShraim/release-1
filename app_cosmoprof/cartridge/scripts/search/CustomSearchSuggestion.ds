/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input CustomerExclusionVal : String
*	@input PortalExclusionVal : String
*	@input ZipExclusionVal : String
*	@input VOCExclusionVal : String
*   @input CurrentCustomer : dw.customer.Customer Current customer.
*   @input SearchPhrase : String
*   @output SuggestionPhrase : Object
*
*/
importPackage( dw.system );
importPackage( dw.suggest );
importPackage( dw.catalog );

var su = require('dw/util').StringUtils;
var site = require('dw/system').Site;
var Customer : dw.customer.Customer = require('dw/customer').Customer;

function execute( args : PipelineDictionary ) : Number
{
	//Get the Search Phrase
	var searchPhrase = args.SearchPhrase;
	var sf = searchPhrase;
	
	// Add Exclusion in Search Phrase
	//CPUAT-255 : PRELOGIN BLOCK CERTAIN PRODUCTS - START
	if(!empty(args.CurrentCustomer) && !(args.CurrentCustomer.authenticated)) {
		var currentSiteURL = request.httpHost; // Fail safe in case Site Pref is empty.
		var defaultChainCode = 'defaultChainCode' in site.current.preferences.custom ? site.current.preferences.custom.defaultChainCode : '';
		var portalToURLTable = 'PortalToURL' in site.current.preferences.custom ? JSON.parse(site.current.preferences.custom.PortalToURL) : '';
		var preLoginExclusionTable = 'preLoginExclusion' in site.current.preferences.custom ? JSON.parse(site.current.preferences.custom.preLoginExclusion) : '';
		
		//NOT GOOD PRACTICE, CAN BE REMOVED ONCE DEFAULTCHAINCODE SITE PREF SET WITH VALUE 00 PREFIX 
		if(defaultChainCode.length < 5){
			defaultChainCode = '00' + defaultChainCode;
		}
	
		if(!empty(defaultChainCode) && !empty(portalToURLTable)  && !empty(preLoginExclusionTable)) {		
			currentSiteURL = portalToURLTable[defaultChainCode];
			if (!empty(currentSiteURL)){
				var preLoginExclusionVal = preLoginExclusionTable[currentSiteURL];
				if(!empty(preLoginExclusionVal) && preLoginExclusionVal.indexOf('|') === -1){
					if(sf.indexOf(preLoginExclusionVal) === -1) {
						sf = su.format('{0} -"|{1}|"',sf,preLoginExclusionVal);
					}
				} else if(!empty(preLoginExclusionVal) && preLoginExclusionVal.indexOf('|') != -1 ){
					var preLoginExclusionValArray = preLoginExclusionVal.split('|');
					for each (var preLoginExclusionValue in preLoginExclusionValArray ){
						if(sf.indexOf(preLoginExclusionValue) === -1){
							sf = su.format('{0} -"|{1}|"',sf,preLoginExclusionValue);
						}
					}
				}
			}
		}
	}
	//CPUAT-255 : PRELOGIN BLOCK CERTAIN PRODUCTS - END
	if(!empty(args.CustomerExclusionVal) || !empty(args.PortalExclusionVal) || !empty(args.ZipExclusionVal) || !empty(args.VOCExclusionVal))
	{
		if(!empty(args.CustomerExclusionVal))
		{
			if(sf.indexOf(args.CustomerExclusionVal) === -1)
			{
				sf = su.format('{0} -"|{1}|"',sf,args.CustomerExclusionVal);
			}
		}
		
		if(!empty(args.PortalExclusionVal))
		{
			if(sf.indexOf(args.PortalExclusionVal) === -1)
			{
				sf = su.format('{0} -"|{1}|"',sf,args.PortalExclusionVal);
			}
		}
		
		if(!empty(args.ZipExclusionVal))
		{
			if(sf.indexOf(args.ZipExclusionVal) === -1)
			{
				sf = su.format('{0} -"|{1}|"',sf,args.ZipExclusionVal);
			}
		}
		
		if(!empty(args.VOCExclusionVal))
		{
			if(sf.indexOf(args.VOCExclusionVal) === -1)
			{
				sf = su.format('{0} -"|{1}|"',sf,args.VOCExclusionVal);
			}
		}
	}
	//End of adding Exclusion
	var maxSuggestions = 5;
	var suggestModel = new SuggestModel();
	suggestModel.setSearchPhrase(sf);
	//suggestModel.setMaxSuggestions(maxSuggestions);
	if (!suggestModel) {
		return;
	}

	
	var suggestObj;
	try {
		var category = getCategorySuggestions(suggestModel);
		var brand = getBrandSuggestions(suggestModel);
		var bestSelerproduct = getbestSellerProductSuggestions(suggestModel, searchPhrase, sf);
		var content = getContentSuggestions(suggestModel);
		var products = getProductSuggestions(suggestModel);
		var videos = getContentSuggestionsOfVideos(suggestModel);
		
		//Check for Search Suggestion
		var spelledSuggestion = {
				searchedPhrase: bestSelerproduct.phrases,
				spellSuggestion : bestSelerproduct.spellSuggestion
		};
	
		 suggestObj =  {
		 	keyword:searchPhrase,
			category: category,
			brand: brand,
			bestSelerproduct: bestSelerproduct,
			content: content,
			products: products,
			spelledSuggestion: spelledSuggestion,
			videos: videos
		};
	} catch(e) {
		var a = e;
	}
	
	args.SuggestionPhrase = suggestObj;


    return PIPELET_NEXT;
}


//=====================//

/**
* @module getCategorySuggestions
*/
function getCategorySuggestions(suggestModel) {
	var suggestions = suggestModel.getCategorySuggestions();
	if (!suggestions) {
		return {
			available: false
		};
	}
	return {
		available: suggestions.hasSuggestions(),
		phrases: suggestions.getSuggestedPhrases(),
		categories: suggestions.getSuggestedCategories(),
		count : suggestions.getSuggestedCategories().asList().length
	};
}

/**
* @module getBrandSuggestions
*/
function getBrandSuggestions(suggestModel: SuggestModel) {
	var suggestions = suggestModel.getBrandSuggestions();
	if (!suggestions) {
		return {
			available: false
		};
	}
	return {
		available: suggestions.hasSuggestedPhrases(),
		phrases: suggestions.getSuggestedPhrases(),
		count : suggestions.getSuggestedPhrases().asList().length
	};
}

/**
* @module getbestSellerProductSuggestions
*/
function getbestSellerProductSuggestions(suggestModel: SuggestModel, searchPhrase: String, searchPhraseWithExclusion: String) {
	
	
	var psm : ProductSearchModel = new ProductSearchModel();
    //Set category root and sorting rules as best seller.
    psm.setCategoryID("root");
    psm.setSearchPhrase(searchPhraseWithExclusion);
    psm.setSortingCondition("best-seller", SearchModel.SORT_DIRECTION_DESCENDING);
    psm.search();
    var MAX_SIZE = 5;
    var count = 0;
    
    var bestSellerList = psm.productSearchHits.asList();
    
	
	
	if (empty(psm.productSearchHits)) {
		return {
			available: false,
			phrases: psm.searchPhrase,
			spellSuggestion: psm.suggestedSearchPhrase
		};
	}
	return {
		available: true,
		productHits: psm.productSearchHits,
		phrases: psm.searchPhrase,
		spellSuggestion: psm.suggestedSearchPhrase,
		count : psm.productSearchHits.asList().length
	};
}

/**
* @module getContentSuggestions
*/
function getContentSuggestions(suggestModel : SuggestModel) {
	suggestModel.setMaxSuggestions(5);
	var suggestions = suggestModel.getContentSuggestions();
	if (!suggestions) {
		return {
			available: false
		};
	}
	return {
		available: suggestions.hasSuggestions(),
		content: suggestions.getSuggestedContent(),
		count : suggestions.getSuggestedContent().asList().length
	};
}

/**
* @module getProductSuggestions
*/
function getProductSuggestions(suggestModel: SuggestModel) {
	var suggestions : ProductSuggestions = suggestModel.getProductSuggestions();
	if (!suggestions) {
		return {
			available: false
		};
	}
	return {
		available: suggestions.hasSuggestions(),
		terms: suggestions.getSearchPhraseSuggestions(),
		products: suggestions.getSuggestedProducts(),
		count : suggestions.getSuggestedProducts().asList().length
	};
}

/**
* @module getContentSuggestionsOfVideos
*/
function getContentSuggestionsOfVideos(suggestModel : SuggestModel) {
	suggestModel.setMaxSuggestions(5);
	var suggestions = suggestModel.getContentSuggestions();
	if (!suggestions) {
		return {
			available: false
		};
	}
	return {
		available: suggestions.hasSuggestions(),
		content: suggestions.getSuggestedContent(),
		count : suggestions.getSuggestedContent().asList().length
	};
}
