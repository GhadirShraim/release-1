/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input CurrentCustomer: dw.customer.Customer
*   @output SortedAddresses : dw.util.List
*
*/
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.customer );

function execute( args : PipelineDictionary ) : Number
{
	try {
		var sorteAddr : dw.util.SortedMap = new dw.util.SortedMap();
		//Get all Customer Address form Customer which is not having address id -1 which is a billing address
		var customer : Customer = args.CurrentCustomer;
		var addresses : List = customer.getProfile().getAddressBook().getAddresses();
		
		for each (address in addresses){
			if ('addressType' in address.custom && address.custom.addressType == 'SHIP'){
				if(new Number(address.ID) != Number.NAN) {
					sorteAddr.put(new Number(address.ID),address);
				} else {
					sorteAddr.put(address.ID,address);
				}
			}
			
		}
		var addressValues = sorteAddr.values();
		var addressList : ArrayList = new ArrayList(addressValues);
		args.SortedAddresses = addressList;
	}
	catch(e) {
		Logger.error("[SortedAddress] There was an error getting shipping addresses: {0}",e);
		return PIPELET_ERROR;
	}
    return PIPELET_NEXT;
}
