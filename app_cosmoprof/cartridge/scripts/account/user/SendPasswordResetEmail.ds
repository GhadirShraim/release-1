/**
* SendPasswordResetEmail
* Sends a password reset email and can include a content asset to override.
*
* @input Customer : dw.customer.Customer
* @input ResetPasswordToken : String
* @input contentAssetID : String
* @input ParentCustomer : dw.customer.Customer optional parameter for parent customer if needed
*
*/
var ArrayList = require('dw/util').ArrayList;
var ContentMgr = require('dw/content').ContentMgr;
var CustomerMgr = require('dw/customer').CustomerMgr;
var Profile = require('dw/customer').Profile;
var Logger = require('dw/system').Logger;
var Mail = require('dw/net').Mail;

function execute( args : PipelineDictionary ) : Number
{

	try 
	{
		var template: Template = new dw.util.Template("mail/resetpasswordemail.isml");
	
	  	var o: Map = new dw.util.HashMap();
	  	o.put("Customer",args.Customer);
	 	o.put("ResetPasswordToken",args.ResetPasswordToken);
	 	
	 	//Find the portal or non-portal site URL
	 	var resetURLHost = request.httpHost; // Fail safe in case Site Pref is empty.
	 	var portalToURLTable = JSON.parse(dw.system.Site.getCurrent().getCustomPreferenceValue('PortalToURL'));
		var custProfileCustom = args.Customer.profile.custom;
		
		// If a chain code exists for the user, use it to set the URL to the portal.
		// Otherwise, the URL will be the http Host.
		if('chainCode' in custProfileCustom && custProfileCustom.chainCode)
		{
			resetURLHost = portalToURLTable[custProfileCustom.chainCode];
		}
	 	
	 	o.put("hostURL", resetURLHost);
	  
	  	// Add dynamic logo by portal	
		var contentLogoID : String = "portal_cosmo";
		if ('chainCode' in args.Customer.profile.custom && args.Customer.profile.custom.chainCode && args.Customer.profile.custom.chainCode != dw.system.Site.current.preferences.custom.defaultChainCode){
			contentLogoID = dw.util.StringUtils.format("portal_{0}_logo",args.Customer.profile.custom.chainCode.replace('00',''));
		}
		var contentLogo : String = ContentMgr.getContent(contentLogoID);
		
		if(contentLogo != null)
		{
			contentLogo = contentLogo.getCustom().body.getMarkup();
			
			if (contentLogo != "")
			{
				o.put("ContentLogo",contentLogo);
			}
 		}
	  
	  	if (!empty(args.contentAssetID)){
		  	var contentFromAsset : String = ContentMgr.getContent(args.contentAssetID).getCustom().body.getMarkup();
		  	var relationalTable = JSON.parse(dw.system.Site.getCurrent().getCustomPreferenceValue('portalRelationalTable'));
		  	var portalName = relationalTable[args.Customer.profile.custom.chainCode.replace('00','')];
			var custFirstName = args.ParentCustomer != null ? args.ParentCustomer.profile.firstName : args.Customer.profile.firstName;
			
		  	contentFromAsset = dw.util.StringUtils.format(contentFromAsset,custFirstName,portalName,args.Customer.profile.email);
		  	//"reset-password-new-account"
		  	if (contentFromAsset != ""){
		  		o.put("ContentFromAsset",contentFromAsset);
		  	}
	  	}
	
		var content: dw.value.MimeEncodedText = template.render(o);
		var mail: Mail = new dw.net.Mail();
		mail.addTo(args.Customer.profile.email);
		mail.setFrom(dw.object.CustomObjectMgr.getCustomObject('PortalData', args.Customer.profile.custom.chainCode) != null ? dw.object.CustomObjectMgr.getCustomObject('PortalData', args.Customer.profile.custom.chainCode).custom.portalEmail : dw.system.Site.getCurrent().getCustomPreferenceValue('customerServiceEmail'));
		mail.setSubject(dw.web.Resource.msg('passwordemail.subject','account',null));
		mail.setContent(content);
		mail.send();
	} 
	catch (ex)
	{
		Logger.error("[SendPasswordResetEmail] There was an error sending the password reset email: {0}",ex);
		return PIPELET_ERROR;
	}

   return PIPELET_NEXT;
}