/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*
*    @input CurrentHttpParameterMap : dw.web.HttpParameterMap
*    @output tokenID : String
*    @output CreditCardType : String
*    @output ExpiryMonth : Number
*    @output ExpiryYear : Number
*    @output HolderName : String
*
*/
importPackage( dw.system );
importPackage( dw.util);
importPackage( dw.order );
importPackage( dw.web );
importPackage( dw.customer );



function execute( args : PipelineDictionary ) : Number
{
	
	var expiryDate : Number;
	var expire :Array;
    var expireMonth : Number; 
    var expireYear : Number;
    var holderName : String;
    var firstName : String;
    var lastName : String;
    var customerAddress = JSON.parse(('customerAddressJson' in dw.system.Site.current.preferences.custom && !empty(dw.system.Site.current.preferences.custom.customerAddressJson)) ? dw.system.Site.current.preferences.custom.customerAddressJson : '""');
    try {
	    if (!empty(args.CurrentHttpParameterMap.decision) &&  args.CurrentHttpParameterMap.decision != null && args.CurrentHttpParameterMap.decision.value == "ACCEPT") {  
			    if(args.CurrentHttpParameterMap.req_card_expiry_date != null && args.CurrentHttpParameterMap.req_card_type != null  && args.CurrentHttpParameterMap.req_bill_to_forename != null && args.CurrentHttpParameterMap.req_bill_to_surname != null){	               
					   try {
					   	    firstName = args.CurrentHttpParameterMap.req_bill_to_forename.stringValue;
					   	    lastName = args.CurrentHttpParameterMap.req_bill_to_surname.value;
					   	    var customerAddressFirstName : String = customerAddress.firstName;
					   	    var customerAddressLastName : String = customerAddress.lastName;
					   	    if(firstName == customerAddressFirstName){
					   	    	firstName= '';	
					   	    }
					   	    if(lastName == customerAddressLastName){
					   	    	lastName= '';	
					   	    }
					   	    
					   	    holderName = firstName + ' ' + lastName;
					   	    expiryDate = args.CurrentHttpParameterMap.req_card_expiry_date.value;
							expire = expiryDate.split("-");
    						expireMonth  = Number(expire[0]);
    						expireYear  = Number(expire[1]);
						    args.CreditCardType = returnCardType(args.CurrentHttpParameterMap.req_card_type.value);
							args.ExpiryMonth = expireMonth;
							args.ExpiryYear = expireYear;
							args.HolderName = holderName;
					   } catch(e) {
						    Logger.error("[IfraamePayment.ds] Error in creating cardType and expiryDate and holderName ( {0} )", e.message);
						    return PIPELET_ERROR;
					   }
			    }
				if(args.CurrentHttpParameterMap.payment_token != null && !empty(args.CurrentHttpParameterMap.payment_token)) {
					try {
						args.tokenID = args.CurrentHttpParameterMap.payment_token.value; 
					} catch(e) {
						Logger.error("[IfraamePayment.ds] Error in creatingToken ( {0} )", e.message);
						return PIPELET_ERROR;
					}	 
				}               
	
	    }
	}catch(e) {
		 Logger.error("[IfraamePayment.ds] Error in response ( {0} )", e.message);
		 return PIPELET_ERROR;
	}   
    return PIPELET_NEXT;
}

function returnCardType(cardType: Number): String {
    var cardTypeNew = "";
    switch (cardType) {
        case "001":
            cardTypeNew = "Visa";
            break;
        case "002":
            cardTypeNew = "MasterCard";
            break;
        case "002":
            cardTypeNew = "Master";
            break;
        case "003":
            cardTypeNew = "Amex";
            break;
        case "004":
            cardTypeNew = "Discover";
            break;
    }
    return cardTypeNew;
}


