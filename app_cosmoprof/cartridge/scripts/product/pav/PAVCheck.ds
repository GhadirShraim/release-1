/**
* PAVCheck.ds
*
*-Description - Run a product availability check to see if the current customer can purchase the given products
*
*   @input CustomerAddress : dw.customer.CustomerAddress
*   @input CurrentCustomer : dw.customer.Customer
*	@input LIC : dw.order.LineItemCtnr
*   @input isNewPAVRules: String
*
*   @output outArray : Object
*
*/
importPackage( dw.system );

var ProductUtils = require('app_cosmoprof/cartridge/scripts/product/ProductUtils').ProductUtils;
var addressAsurance = require('int_same_day_delivery/cartridge/scripts/deliveryAssurance/addressAsurance');

function execute( pdict : PipelineDictionary ) : Number
{
	try
	{
		if(pdict.LIC == null)
		{
			return PIPELET_ERROR;
		}
		
		var isNewPAVRules = "false";
		
		if(!empty(pdict.isNewPAVRules))
		{
			isNewPAVRules=pdict.isNewPAVRules;
		}
		else
		{
			isNewPAVRules="false";
		}
		
			var customerAddress : CustomerAddress = pdict.CustomerAddress;
			var customer : Customer = pdict.CurrentCustomer;
			var addressBook : AddressBook = customer.profile.addressBook;
        	var addressChanged = false;
			
			if (dw.system.Site.current.ID == 'CosmoProf-CA' && customerAddress.postalCode.toString().indexOf(' ') == -1) {
				customerAddress.postalCode = customerAddress.postalCode.toString().replace(/(.{3})/g, '$1 ').trim();
			}

			if (!(!empty(addressBook.getPreferredAddress()) && customerAddress.address1 == addressBook.getPreferredAddress().address1
										&& customerAddress.address2 == addressBook.getPreferredAddress().address2
										&& customerAddress.city == addressBook.getPreferredAddress().city
										&& customerAddress.stateCode == addressBook.getPreferredAddress().stateCode
										&& customerAddress.postalCode == addressBook.getPreferredAddress().postalCode)) {
					
					addressChanged = true;
					addressBook.setPreferredAddress(customerAddress);
					var newInventoryLogicEnabled : Boolean = dw.system.Site.getCurrent().getCustomPreferenceValue("newInventoryLogicEnabled");
					
					if(newInventoryLogicEnabled) {
						
						var inventoryListData = dw.system.Site.getCurrent().getCustomPreferenceValue('inventoryListID_Mapping');
						
						if(inventoryListData) {
							
							var inventoryMap = JSON.parse(inventoryListData);
							var inventoryListID = '';
							
							if (inventoryMap[customerAddress.stateCode]) {
								inventoryListID = inventoryMap[customerAddress.stateCode];
								if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
									inventoryListID = '';
								}
							}
							
							if (empty(inventoryListID) && inventoryMap[customerAddress.countryCode.value]) {
								inventoryListID = inventoryMap[customerAddress.countryCode];
								if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
									inventoryListID = '';
								}
							}
							
							if (empty(inventoryListID) && dw.system.Site.current.ID == 'CosmoProf') {
								inventoryListID = inventoryMap['US_Default'];
								if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
									inventoryListID = '';
								}
							}
							
							if (empty(inventoryListID) && dw.system.Site.current.ID == 'CosmoProf-CA') {
								inventoryListID = inventoryMap['CA_Default'];
								if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
									inventoryListID = '';
								}
							} 
							
							if(!empty(inventoryListID)) {
								customer.profile.custom.inventoryListID = inventoryListID;
							} else {
								customer.profile.custom.inventoryListID = '';
							}
						}
					}
					
					if (addressChanged || empty(session.custom.sddCheckComplete) || !session.custom.sddCheckComplete) {
					// Execute for SDD.
					Transaction.wrap(function () {
						addressAsurance.execute();
					});
					session.custom.sddCheckComplete = true;	
					}
				}
			
		var unshippableProducts = ProductUtils.getAvailability(pdict.LIC, false, '', isNewPAVRules);
		
		pdict.outArray = unshippableProducts;
	}
	catch(e)
	{
		Logger.error('PAVCheck has failed with the following error: ' + e);
		return PIPELET_ERROR;
	}
	
    return PIPELET_NEXT;
}