/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input ZipOrState : String
*   @input Radius     : String
*   @input IsNearestLocation : Boolean
*   @input Latitude  : String
*   @input Longitude  : String
*   @output Stores : dw.util.ArrayList;
*
*/
importPackage( dw.system );
importPackage( dw.net );

function execute( args : PipelineDictionary ) : Number
{

    try {
    	var httpClient : HTTPClient = new HTTPClient();
		var message : String;
		var storeList : dw.util.ArrayList = new dw.util.ArrayList();
		var reoseoURL : String = 'ReoSeoAPIURL' in dw.system.Site.current.preferences.custom ? dw.system.Site.current.preferences.custom.ReoSeoAPIURL : "" ;
		var isDebugMode = 'shoppingListDebugMode' in dw.system.Site.current.preferences.custom ? dw.system.Site.current.preferences.custom.shoppingListDebugMode : false ;
		var queryparameter : String;
		var url : String;
		
		if(!empty(reoseoURL)) {
			/*Check for current location*/
    		if(args.IsNearestLocation) {
    			if(isDebugMode) {
    				queryparameter = "lat=" + "51.003015" + "&lng=" + "-114.047630" + "&rad=" + args.Radius;
    			}
    			else {
    				queryparameter = "lat=" + args.Latitude + "&lng" + args.Longitude + "&rad" + args.Radius;
    			}
    			
				url = reoseoURL + "?" + queryparameter;
    		}
    		else {
    			/* In Case of Zip and Radius */
    			if(!empty(args.ZipOrState)) {
    				var NoWhiteSpaceZipOrCity = args.ZipOrState.replace(" ", "");
    				queryparameter = "addr=" + NoWhiteSpaceZipOrCity + "&rad=" + args.Radius;
					url = reoseoURL + "?" + queryparameter;
    			}
    			else {
    				Logger.error("[GetCosmoStore.ds] Couldn't Find Store. Zip or State is not provided");
					return PIPELET_ERROR;
    			}
    		}
    		
    		/* If we have URL */
    		if(!empty(url)) {
    			//Logger.info("[GetCosmoStore.ds] Store Lacator URL:- " + encodeURI(url));
    			//Send Request 
				 httpClient.open('GET', encodeURI(url));
				 httpClient.send();
				 if (httpClient.statusCode == 200)
				 {
			 		var storeDetail = JSON.parse(httpClient.text);
			     	if(!empty(storeDetail)) {
				      	for each(let store in storeDetail) {
				      		storeList.add(store);
				     	 }
				     	 args.Stores = storeList;
			      	} else {
			      		args.Stores = new dw.util.ArrayList();
			      	}
			      	
			     }
				 else
				 {
				     // error handling
				     message = "An error occurred with status code "+ httpClient.statusCode;
				     Logger.error("[GetCosmoStore.ds] Erroe while calling Service- {0}", message);
				     return PIPELET_ERROR;
				 }
    		}
		}
		else {
			Logger.error("[GetCosmoStore.ds] Store Lacator URL is missing in Site Preference.");
			return PIPELET_ERROR;
		}
    }
    catch(e) {
    	var error = e;
    	Logger.error("[GetCosmoStore.ds] Erroe while calling Service- {0}", e.message);
    }
    return PIPELET_NEXT;
}
