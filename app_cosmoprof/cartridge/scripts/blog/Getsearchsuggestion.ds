/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input blogSearch : String
*   @input blogFolderID : String
*   @input chainCode : String
*   @output blogSearchOutput : Object
*
*/
importPackage( dw.system );
importPackage(dw.suggest);
importPackage(dw.object);
importPackage(dw.util);
importPackage(dw.web);

function execute( args : PipelineDictionary ) : Number
{
	try{

  	var suggestModel : SuggestModel = new SuggestModel();
  	var suggestionSize : Number='suggestionSize' in Site.getCurrent().preferences.custom ? Site.getCurrent().preferences.custom.suggestionSize : 5 ;
  	var query : String = args.blogSearch;
  	var fdid1 : String = "blog-"+args.chainCode;
  	var fdid2 : String = "blog-archive-"+args.chainCode;
  	suggestModel.setSearchPhrase(query);
    suggestModel.setMaxSuggestions(10);
  	var blogSuggestions : ContentSuggestions = suggestModel.getContentSuggestions();
  	var blogStore : Array = [];
  	var blogSuggestionsAvailable : Boolean = !empty(blogSuggestions) && blogSuggestions.hasSuggestions();
  	
	var suggestedContent : SuggestedContent = null;
	
	if(blogSuggestionsAvailable){
			var foundContents : Iterator = blogSuggestions.getSuggestedContent();
			var count : Number = 0;
			while(foundContents.hasNext()){
				suggestedContent = foundContents.next();
				var blog : Content = suggestedContent.getContent();
				for(var i=0; i<blog.folders.length; i++){
					if( (blog.folders[i].ID == fdid1 || blog.folders[i].ID == fdid2 ) && count < suggestionSize){
						count++;
						blogStore.push({
							//ID    : blog.ID,
							name  : blog.name,
							folderID  : blog.folders[i].ID,
							//description : blog.description,
							url   : URLUtils.abs('Page-Show', 'cid', blog.ID).toString()
						});
						break;
					}
				}
			}
		}
	}catch(Error){
		Logger.error("error  msg......."+Error);
	}
    args.blogSearchOutput={'blogSuggestions':blogStore};
    
   return PIPELET_NEXT;
}
