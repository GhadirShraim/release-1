/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input OrderHeaders : Object This is a sample comment.
*   @output OrderTotal : String
*   @output TotalTax : String
*   @output TaxableProducts : String
*   @output NonTaxableProducts : String
*
*/
importPackage( dw.system );

function execute( args : PipelineDictionary ) : Number
{
	try {
		if (!empty(args.OrderHeaders)) {
			var orderTotals = 0;
			var totalTax = 0;
			var nonTaxable = 0;
			var taxable = 0;
			
			for each(var ord in args.OrderHeaders) {
				var order = ord;
				if (ord.hasOwnProperty('orderTotal') && !empty(ord.orderTotal)) {
					if (ord.orderTotal.toString().search('-') > -1) {
						let ot =  ord.orderTotal.replace('-','');
						orderTotals -= !isNaN(new Number(ot)) ? new Number(ot) : 0;
					} else {
						orderTotals += !isNaN(new Number(ord.orderTotal)) ? new Number(ord.orderTotal) : 0;
					}
				}
				if (ord.hasOwnProperty('tax') && !empty(ord.tax)) {
					if (ord.tax.toString().search('-') > -1) {
						let t = ord.tax.replace('-','');
						totalTax -= !isNaN(new Number(t)) ? new Number(t) : 0;
					} else {
						totalTax += !isNaN(new Number(ord.tax)) ? new Number(ord.tax) : 0;
					}
					
				}
				
				if (ord.hasOwnProperty('nonTaxableMerchandise') && !empty(ord.nonTaxableMerchandise)) {
					if (ord.nonTaxableMerchandise.toString().search('-') > -1) {
						let ntm = ord.nonTaxableMerchandise.replace('-','');
						nonTaxable -= !isNaN(new Number(ntm)) ? new Number(ntm) : 0;
					} else {
						nonTaxable += !isNaN(new Number(ord.nonTaxableMerchandise)) ? new Number(ord.nonTaxableMerchandise) : 0;
					}
					
				}
				
				if (ord.hasOwnProperty('taxableMerchandise') && !empty(ord.taxableMerchandise)) {
					if (ord.taxableMerchandise.toString().search('-') > -1) {
						let tm = ord.taxableMerchandise.replace('-','');
						taxable -= !isNaN(new Number(tm)) ? new Number(tm) : 0;
					} else {
						taxable += !isNaN(new Number(ord.taxableMerchandise)) ? new Number(ord.taxableMerchandise) : 0;
					}
					
				}
			}
			
			args.OrderTotal = orderTotals.toFixed(2);
			args.TotalTax = totalTax.toFixed(2);
			args.TaxableProducts = taxable.toFixed(2);
			args.NonTaxableProducts = nonTaxable.toFixed(2);
			
		}
	
	} catch(e) {
		var error = e;
		Logger.error("Error while calculting Order Summary", e);
		return PIPELET_ERROR;
	}

    return PIPELET_NEXT;
}
