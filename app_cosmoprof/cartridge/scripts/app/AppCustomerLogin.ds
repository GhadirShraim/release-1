/**
* Script file for use in the Script pipelet node.
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @output LoggedIn : Boolean This is a sample comment.
*
*/

importPackage( dw.system );
importPackage( dw.web );
importPackage( dw.customer );
var addressAsurance = require('int_same_day_delivery/cartridge/scripts/deliveryAssurance/addressAsurance');

function execute( args : PipelineDictionary ) : Number
{
    try {
    	var cookies : Cookies = request.getHttpCookies();
    	args.LoggedIn = false;

    	if(!empty(cookies["appview"]) && (cookies["appview"].value) && !empty(cookies["lid"])) {
    		var loginID = cookies["lid"].value;
    		var decodedLogin = dw.util.StringUtils.decodeBase64(loginID);
			var tempCust : Customer = CustomerMgr.getCustomerByLogin(decodedLogin);
			if (!empty(tempCust) && !empty(tempCust.profile)) {
				var externalProfile = tempCust.getExternalProfile('CosmoApp', decodedLogin);
	            if (!externalProfile) {
	                    tempCust.createExternalProfile('CosmoApp', decodedLogin);
	            }
		  		if (!tempCust.authenticated) {
		  			//Logger.debug("Logged In again");
		  			var loggedInStatus = CustomerMgr.loginExternallyAuthenticatedCustomer('CosmoApp', decodedLogin, false);
		  			//Re-initialize the app view
		  			session.custom.appRequest = true;
		  			if ('discountModelAssigned' in session.custom) {
		  				delete session.custom.discountModelAssigned;
		  			}
		  			
		  			args.LoggedIn = true;
		  			
		  			//SDD feature and new inventory logic activation
					var addressBook : AddressBook = tempCust.profile.addressBook;
					var activeShippingAddres = 'activeShipAddressID' in tempCust.profile.custom && !empty(tempCust.profile.custom.activeShipAddressID) ? tempCust.profile.custom.activeShipAddressID : "";
		  			
		  			if (!empty(activeShippingAddres)) {
			
						var getActiveAddr =  tempCust.getAddressBook().getAddress(activeShippingAddres);
						var newInventoryLogicEnabled : Boolean = dw.system.Site.getCurrent().getCustomPreferenceValue("newInventoryLogicEnabled");
						if(newInventoryLogicEnabled) {
							
							var inventoryListData = dw.system.Site.getCurrent().getCustomPreferenceValue('inventoryListID_Mapping');
							
							if(inventoryListData) {
								
								var inventoryMap = JSON.parse(inventoryListData);
								var inventoryListID = '';
								
								if (inventoryMap[getActiveAddr.stateCode]) {
									inventoryListID = inventoryMap[getActiveAddr.stateCode];
									if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
										inventoryListID = '';
									}
								}
								
								if (empty(inventoryListID) && inventoryMap[getActiveAddr.countryCode.value]) {
									inventoryListID = inventoryMap[getActiveAddr.countryCode];
									if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
										inventoryListID = '';
									}
								}
								
								if (empty(inventoryListID) && dw.system.Site.current.ID == 'CosmoProf') {
									inventoryListID = inventoryMap['US_Default'];
									if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
										inventoryListID = '';
									}
								}
								
								if (empty(inventoryListID) && dw.system.Site.current.ID == 'CosmoProf-CA') {
									inventoryListID = inventoryMap['CA_Default'];
									if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
										inventoryListID = '';
									}
								} 
								
								if(inventoryListID) {
									customer.profile.custom.inventoryListID = inventoryListID;
								} else {
									customer.profile.custom.inventoryListID = '';
								}
							}
						}
					
						if (empty(session.custom.sddCheckComplete) || !session.custom.sddCheckComplete ) {
						// Execute for SDD.
						Transaction.wrap(function () {
							addressAsurance.execute();
						});
						session.custom.sddCheckComplete = true;
						}
		  			}
		  		}
			}
		}
    } catch(e) {
    	Logger.error("Could not login Customer in App: " + e.message);
    }

   return PIPELET_NEXT;
}
