/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Basket : dw.order.Basket
*   @input isNewPAVRules: String
*   @output OutOfstockProduct : dw.util.ArrayList;
*
*/
importPackage( dw.system );
importPackage( dw.order);
importPackage( dw.util );
importPackage( dw.catalog );
var ProductUtils = require('app_cosmoprof/cartridge/scripts/product/ProductUtils').ProductUtils;
function execute( args : PipelineDictionary ) : Number
{

    try{
    		var basket : Basket = args.Basket;
	   	    var al : ArrayList = new ArrayList();
	   	    
	   	    var isNewPAVRules = "false";
		
			if(!empty(args.isNewPAVRules))
			{
				isNewPAVRules=args.isNewPAVRules;
			}
	    
	   		 //Get All Product Line Items
	   		 var pli : ArrayList = basket.getProductLineItems();
	   		 var itr : Iterator = pli.iterator();
	    	 while(itr.hasNext()) {
		    	var pl : ProductLineItem = itr.next();
		    	var prod : Product = pl.product;
		    	var isProdValid = ProductUtils.getAvailability(prod, false,'', isNewPAVRules);		    	 
		    	
		    	if (isProdValid.sddavail && pl.custom.availableQuantitySDD == 0) {
		    			al.add(prod.ID);
		    			basket.removeProductLineItem(pl);		    		
		    	}
		    	
		    	if(isProdValid.status == 'NOT_AVAILABLE' || isProdValid == false) {
		    		// Enable SDD Inventory
		    		if (!session.custom.isPortalUser && 'isEligibleForSSD' in session.privacy && !empty(session.privacy.isEligibleForSSD) && 'bsgOrders' in session.privacy && !empty(session.privacy.bsgOrders)) {
		    			if ('SDDAvailable' in prod.custom && prod.custom.SDDAvailable == true && 'isSDDEligible' in pl.custom && pl.custom.isSDDEligible == true && pl.custom.deliveryMethod == 'SDD') {
		    				var productListInventory = dw.catalog.ProductInventoryMgr.getInventoryList('sdd_inventory_list');
		    				if (!empty(productListInventory)) {
		    					var availabilityModel : dw.catalog.ProductAvailabilityModel = prod.getAvailabilityModel(productListInventory);
		    					if (!empty(availabilityModel.inventoryRecord) && availabilityModel.inventoryRecord.perpetual) {
		    						// Don't Remove
		    					} else {
		    						// use case:- If SDD is eligible for Current Address, product also eligible but the sdd inventory doesn't have perpetual.
		    						al.add(prod.ID);
		    						basket.removeProductLineItem(pl);
		    					}
		    				}
		    				
		    			} else {
		    				// use case:- If SDD is eligible for Current Address but this product is not eligible
		    				al.add(prod.ID);
		    				basket.removeProductLineItem(pl);
		    			}
		    		} else {
		    			// use case:- If SDD is not eligible for Current Address
		    			al.add(prod.ID);
		    			basket.removeProductLineItem(pl);
		    		}
		    	}
	    }
	    
	    args.OutOfstockProduct = al;
    }
    catch(e) {
    	var a = e;
    }
    
   return PIPELET_NEXT;
}
