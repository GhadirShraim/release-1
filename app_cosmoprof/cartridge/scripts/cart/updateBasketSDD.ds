/**
* Script file for use in the Script pipelet node.
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Basket : dw.order.Basket
*	@input CurrentCustomer: dw.customer.Customer
*
*/
var Basket = require('dw/order').Basket;
var Logger = require('dw/system').Logger;
var ProductLineItem = require('dw/order').ProductLineItem;

function execute( args : PipelineDictionary ) : Number
{

    try 
	{
		var basket : Basket = args.Basket;
		if(!empty(basket)){
		for each ( let pli : ProductLineItem in basket.productLineItems ) 
		{
			pli.custom.maxSDDQty = '0';
            pli.custom.ShipNode = null;
            pli.custom.reservationID = null;
		}
		}
		
		var customer : Customer = args.CurrentCustomer;
		customer.profile.custom.inventoryListID = 'USA_inventory_list';
		var addressBook : AddressBook = customer.profile.addressBook;
		var activeShippingAddres = 'activeShipAddressID' in customer.profile.custom && !empty(customer.profile.custom.activeShipAddressID) ? customer.profile.custom.activeShipAddressID : "";
		if (!empty(activeShippingAddres)) {
			
			var getActiveAddr =  customer.getAddressBook().getAddress(activeShippingAddres);
			//SDD feature and new inventory logic activation
			var newInventoryLogicEnabled : Boolean = dw.system.Site.getCurrent().getCustomPreferenceValue("newInventoryLogicEnabled");
			if(newInventoryLogicEnabled) {
				
				var inventoryListData = dw.system.Site.getCurrent().getCustomPreferenceValue('inventoryListID_Mapping');
				
				if(inventoryListData) {
					
					var inventoryMap = JSON.parse(inventoryListData);
					var inventoryListID = '';
					
					if (inventoryMap[getActiveAddr.stateCode]) {
						inventoryListID = inventoryMap[getActiveAddr.stateCode];
						if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
							inventoryListID = '';
						}
					}
					
					if (empty(inventoryListID) && inventoryMap[getActiveAddr.countryCode.value]) {
						inventoryListID = inventoryMap[getActiveAddr.countryCode];
						if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
							inventoryListID = '';
						}
					}
					
					if (empty(inventoryListID) && dw.system.Site.current.ID == 'CosmoProf') {
						inventoryListID = inventoryMap['US_Default'];
						if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
							inventoryListID = '';
						}
					}
					
					if (empty(inventoryListID) && dw.system.Site.current.ID == 'CosmoProf-CA') {
						inventoryListID = inventoryMap['CA_Default'];
						if(!dw.catalog.ProductInventoryMgr.getInventoryList(inventoryListID)) {
							inventoryListID = '';
						}
					} 
					Logger.error("updateBasketSDD : Set the inventory list on profile "+customer.ID+" inventory : "+inventoryListID);
					if(!empty(inventoryListID)) {
						customer.profile.custom.inventoryListID = inventoryListID;
					}
				}
			}
		}

		
		
	} 
	catch ( ex ) 
	{
		Logger.error("[updateBasketSDD] There was an error getting the updating Lineitems: {0}",ex);
		return PIPELET_ERROR;
	}

   return PIPELET_NEXT;
}
