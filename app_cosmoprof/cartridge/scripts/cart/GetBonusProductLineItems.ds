/**
* Script file for use in the Script pipelet node.
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input BonusDiscountLineItems : dw.util.ArrayList
*   @output BonusLineItems : dw.util.ArrayList
*
*/


importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );
function execute( args : PipelineDictionary ) : Number
{

   try {
   	   //Track the Discount Line item from each promotion.
	   var BonusDiscountLineItems : ArrayList = args.BonusDiscountLineItems;
	   var uniqueBonusLineItems : ArrayList = new ArrayList();
	   var trackedPromotion : ArrayList = new ArrayList();
	   
	   for each (var bli : BonusDiscountLineItem in BonusDiscountLineItems) {
	   		if (!trackedPromotion.contains(bli.promotionID)) {
	   			trackedPromotion.add(bli.promotionID);
	   			uniqueBonusLineItems.add(bli);
	   		}
	   }
	   
	   args.BonusLineItems = uniqueBonusLineItems;
   } catch(e) {
   		Logger.error("[GetBonusProductLineItems.ds]: Error at: " + e.message);
   }
   return PIPELET_NEXT;
}
